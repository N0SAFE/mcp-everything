name: üîç Package Tests

on:
  push:
    paths:
      - 'packages/**'
      - 'apps/**'
      - 'package.json'
      - 'bun.lock'
      - 'turbo.json'
  pull_request:
    paths:
      - 'packages/**'
      - 'apps/**'
      - 'package.json'
      - 'bun.lock'
      - 'turbo.json'

env:
  BUN_VERSION: "1.2.14"

jobs:
  # Detect which packages changed
  detect-changes:
    name: üîç Detect Changes
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      packages: ${{ steps.changes.outputs.packages }}
      matrix: ${{ steps.changes.outputs.matrix }}

    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Detect changed packages
        id: changes
        run: |
          echo "Detecting changed packages..."
          
          # Get list of changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1)
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Initialize arrays
          PACKAGES=()
          
          # Check each changed file
          while IFS= read -r file; do
            if [[ -n "$file" ]]; then  # Only process non-empty lines
              if [[ $file == packages/* ]]; then
                # Extract package name
                PACKAGE=$(echo "$file" | cut -d'/' -f2)
                if [[ -n "$PACKAGE" && ! " ${PACKAGES[@]} " =~ " ${PACKAGE} " ]]; then
                  PACKAGES+=("$PACKAGE")
                fi
              elif [[ $file == apps/* ]]; then
                # Extract app name
                APP=$(echo "$file" | cut -d'/' -f2)
                if [[ -n "$APP" && ! " ${PACKAGES[@]} " =~ " ${APP} " ]]; then
                  PACKAGES+=("$APP")
                fi
              elif [[ $file == "package.json" || $file == "bun.lock" || $file == "turbo.json" ]]; then
                # Root changes affect all packages
                PACKAGES=("root" "web" "api" "eslint-config" "prettier-config" "tailwind-config" "tsconfig" "types" "ui" "vitest-config" "directus-sdk" "bin")
                break
              fi
            fi
          done <<< "$CHANGED_FILES"
          
          # Filter out empty strings and duplicates
          FILTERED_PACKAGES=()
          for package in "${PACKAGES[@]}"; do
            if [[ -n "$package" && ! " ${FILTERED_PACKAGES[@]} " =~ " ${package} " ]]; then
              FILTERED_PACKAGES+=("$package")
            fi
          done
          
          # Convert to JSON array safely
          if [ ${#FILTERED_PACKAGES[@]} -eq 0 ]; then
            PACKAGES_JSON="[]"
          else
            # Use jq to safely create JSON array from filtered packages
            PACKAGES_JSON=$(printf '%s\n' "${FILTERED_PACKAGES[@]}" | jq -R . | jq -s .)
          fi
          
          echo "packages=$PACKAGES_JSON" >> $GITHUB_OUTPUT
          echo "matrix={\"package\": $PACKAGES_JSON}" >> $GITHUB_OUTPUT
          
          echo "Detected packages: $PACKAGES_JSON"

  # Run tests for changed packages
  test-changed:
    name: üß™ Test Changed Packages
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: detect-changes
    if: needs.detect-changes.outputs.packages != '[]'

    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.detect-changes.outputs.matrix)}}

    steps:
      - name: üìö Checkout repository
        uses: actions/checkout@v4

      - name: üê∞ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: üì¶ Install dependencies
        run: bun install --frozen-lockfile

      - name: üß™ Test package - ${{ matrix.package }}
        run: |
          echo "Testing package: ${{ matrix.package }}"
          
          if [ "${{ matrix.package }}" = "root" ]; then
            echo "Running root-level tests..."
            bun run test
          elif [ "${{ matrix.package }}" = "web" ] || [ "${{ matrix.package }}" = "api" ]; then
            echo "Testing app: ${{ matrix.package }}"
            cd apps/${{ matrix.package }}
            if [ -f "package.json" ] && grep -q '"test"' package.json; then
              bun run test
            else
              echo "No tests found for ${{ matrix.package }}"
            fi
          else
            echo "Testing package: ${{ matrix.package }}"
            cd packages/${{ matrix.package }}
            if [ -f "package.json" ] && grep -q '"test"' package.json; then
              bun run test
            else
              echo "No tests found for ${{ matrix.package }}"
            fi
          fi

      - name: üé® Lint package - ${{ matrix.package }}
        run: |
          if [ "${{ matrix.package }}" = "root" ]; then
            echo "Running root-level lint..."
            bun run lint
          elif [ "${{ matrix.package }}" = "web" ] || [ "${{ matrix.package }}" = "api" ]; then
            echo "Linting app: ${{ matrix.package }}"
            cd apps/${{ matrix.package }}
            if [ -f "package.json" ] && grep -q '"lint"' package.json; then
              bun run lint
            else
              echo "No lint script found for ${{ matrix.package }}"
            fi
          else
            echo "Linting package: ${{ matrix.package }}"
            cd packages/${{ matrix.package }}
            if [ -f "package.json" ] && grep -q '"lint"' package.json; then
              bun run lint
            else
              echo "No lint script found for ${{ matrix.package }}"
            fi
          fi

  # Summary job
  test-summary:
    name: üìã Test Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [detect-changes, test-changed]
    if: always()

    steps:
      - name: üìã Generate summary
        run: |
          echo "## üß™ Package Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          PACKAGES='${{ needs.detect-changes.outputs.packages }}'
          
          if [ "$PACKAGES" = "[]" ]; then
            echo "üü¢ **No packages changed** - No tests needed" >> $GITHUB_STEP_SUMMARY
          else
            echo "üì¶ **Changed packages**: $PACKAGES" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Package | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ needs.test-changed.result }}" = "success" ]; then
              echo "| All Packages | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.test-changed.result }}" = "failure" ]; then
              echo "| Some Packages | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| All Packages | ‚è≠Ô∏è Skipped |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó **View detailed results** in the workflow logs above." >> $GITHUB_STEP_SUMMARY
