version: "3"

services:
  api-db:
    extends:
      file: ./apps/api/docker-compose.yml
      service: api-db
    volumes:
      - api_db_data:/var/lib/mysql
    networks:
      - app_network

  api-cache:
    extends:
      file: ./apps/api/docker-compose.yml
      service: api-cache
    networks:
      - app_network

  api:
    extends:
      file: ./apps/api/docker-compose.yml
      service: api
    depends_on:
      api-db:
        condition: service_healthy
      api-cache:
        condition: service_healthy
    environment:
      ADMIN_TOKEN: ${API_ADMIN_TOKEN:-secret-admin-token}

    networks:
      - app_network

  web:
    depends_on:
      api:
        condition: service_healthy
    container_name: web
    volumes:
      - .:/app
      - /app/node_modules
      - /app/apps/web/node_modules
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile-dev
    command: "tree -I 'node_modules'"
    restart: always
    ports:
      - ${NEXT_PUBLIC_APP_PORT:-3003}:${NEXT_PUBLIC_APP_PORT:-3003}
    networks:
      - app_network
    environment:
      API_PING_PATH: /server/ping
      NEXT_PUBLIC_APP_DIRECTUS_PROXY_PATH: /api/_directus
      NEXT_PUBLIC_API_URL: http://api:${NEXT_PUBLIC_API_PORT:-8055}/
      NEXT_PUBLIC_API_PORT: ${NEXT_PUBLIC_API_PORT:-8055}
      NEXT_PUBLIC_APP_URL: http://localhost:${NEXT_PUBLIC_APP_PORT:-3003}
      NEXT_PUBLIC_APP_PORT: ${NEXT_PUBLIC_APP_PORT:-3003}
      API_ADMIN_TOKEN: ${API_ADMIN_TOKEN:-secret-admin-token}
      AUTH_SECRET: ${AUTH_SECRET:-QgafJQw3O/k1gambz7YGKjtj5ZZe0dnL/WlSw4PtMDc=}
  # api:
  #   container_name: api
  #   build:
  #     context: .
  #     dockerfile: ./apps/api/Dockerfile
  #   restart: always
  #   ports:
  #     - 3001:3001
  #   networks:
  #     - app_network

# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
networks:
  app_network:

volumes:
  api_db_data:
