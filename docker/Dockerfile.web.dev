# Development Dockerfile for Web App with HMR
FROM node:22-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install Turbo globally
RUN npm install -g turbo@^2

# Copy root package files
COPY package*.json ./
COPY turbo.json ./

# Copy workspace package files
COPY apps/web/package*.json ./apps/web/
COPY packages/*/package*.json ./packages/*/

# Install dependencies
RUN npm install

# Development runner
FROM base AS runner
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install Turbo globally
RUN npm install -g turbo@^2

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/apps/web/node_modules ./apps/web/node_modules

# Copy all source files
COPY . .

# Set build-time environment variables for Next.js
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_API_PORT
ARG NEXT_PUBLIC_APP_URL
ARG NEXT_PUBLIC_APP_PORT
ARG API_PING_PATH
ARG API_ADMIN_TOKEN
ARG AUTH_SECRET

ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
ENV NEXT_PUBLIC_API_PORT=$NEXT_PUBLIC_API_PORT
ENV NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL
ENV NEXT_PUBLIC_APP_PORT=$NEXT_PUBLIC_APP_PORT
ENV API_PING_PATH=$API_PING_PATH
ENV API_ADMIN_TOKEN=$API_ADMIN_TOKEN
ENV AUTH_SECRET=$AUTH_SECRET

# Create a non-root user with host user's UID/GID for proper file permissions
ARG USER_ID=1000
ARG GROUP_ID=1000
RUN addgroup --system --gid ${GROUP_ID} nodejs
RUN adduser --system --uid ${USER_ID} --ingroup nodejs nextjs

# Change ownership of the app directory to the nextjs user
RUN chown -R nextjs:nodejs /app
USER nextjs

# Expose port
EXPOSE 3003

# Set environment variables for development
ENV NODE_ENV=development
ENV NEXT_TELEMETRY_DISABLED=1

# Start the development server with hot reloading
CMD ["npm", "run", "dev:docker", "--workspace=web"]
