# Production Dockerfile for Web App (Standalone) - includes API waiting
FROM node:22-alpine AS base

# Install dependencies only when needed
FROM base AS builder
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install Turbo globally
RUN npm install -g turbo@^2

# Copy everything and prune
COPY . .
RUN turbo prune web --docker

# Install dependencies with dev dependencies for runtime building
FROM base AS installer
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install Turbo globally
RUN npm install -g turbo@^2

# Install ALL dependencies (including dev dependencies for runtime building)
COPY --from=builder /app/out/json/ .
RUN npm ci

# Copy all source files (no build here)
COPY --from=builder /app/out/full/ .

# Production runner
FROM base AS runner
WORKDIR /app

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Install Turbo globally for runtime building
RUN npm install -g turbo@^2

# Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy dependencies (including dev dependencies for runtime building)
COPY --from=installer /app/node_modules ./node_modules

# Copy all source files for runtime building
COPY --from=installer /app .

# Set the correct permission for build directories and all writable paths
RUN mkdir -p .next apps/web/.next apps/web/src/routes
RUN chown -R nextjs:nodejs /app

USER nextjs

# Expose port
EXPOSE 3000

# Set environment variables (runtime environment variables for build and execution)
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000

# Note: Build-time environment variables will be provided via docker-compose environment section
# They are needed for the runtime build process and will be available when the container starts

# Start the application with runtime build including wait-api
ENTRYPOINT ["dumb-init", "--"]
CMD ["sh", "-c", "npm run build --workspace=web && npm run start:docker --workspace=web"]
