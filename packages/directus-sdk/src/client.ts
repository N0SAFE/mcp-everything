/**
 * This file is automatically generated by the `@indirectus/cli` package.
 * Follow the package's instruction to update this file with the latest schema.
 */

import type * as Directus from "@directus/sdk";

import * as DirectusSDK from "@directus/sdk";

import { ApplyQueryFields } from "./types/ApplyQueryFields";

import * as SystemBinding from "./bindings/system-binding";
import * as ItemBinding from "./bindings/item-binding";

type DirectusSDK = typeof DirectusSDK;

/*
declare module "@directus/sdk" {
  type DirectusAccess<Schema = any> = Directus.MergeCoreCollection<
    Schema,
    "directus_access", {
      id: string;
    }
  >;

  type DirectusPolicies<Schema = any> = Directus.MergeCoreCollection<
    Schema,
    "directus_policies", {
      id: string;
    }
  >;
}
*/

export namespace Types {
  // Internal
  export type Nullable<T> = T | null;
  export type Optional<T> = Nullable<T>;
  export type UnknownType<T> = T | unknown;
  export type PrimaryKey<T> = T;

  // Numbers
  export type BigInteger = number;
  export type Decimal = number;
  export type Float = number;
  export type Integer = number;
  export type Number = number;

  // Buffers
  export type Binary = string;
  export type String = string;
  export type Text = string;

  // Date & Time
  export type Date = string | globalThis.Date;
  export type DateTime = string | globalThis.Date;

  // Geometry
  export namespace Geometry {
    export type LineString = any;
    export type MultiLineString = any;
    export type MultiPoint = any;
    export type MultiPolygon = any;
    export type Point = any;
    export type Polygon = any;
  }

  // Complex
  export type JSON = any;
  export type JSONSchema = any;

  // Others
  export type UUID = string;
  export type Boolean = boolean;
  export type Enum = string;
}

/**
 * All collection types.
 */
export namespace Collections {
  /**
   * The resolved directus activity collection type.
   *
   */
  export type DirectusActivity = Directus.DirectusActivity<System>;

  /**
   * The resolved directus collections collection type.
   *
   */
  export type DirectusCollection = Directus.DirectusCollection<System>;

  /**
   * The resolved directus fields collection type.
   *
   */
  export type DirectusField = Directus.DirectusField<System>;

  /**
   * The resolved directus files collection type.
   *
   */
  export type DirectusFile = Directus.DirectusFile<System>;

  /**
   * The resolved directus folders collection type.
   *
   */
  export type DirectusFolder = Directus.DirectusFolder<System>;

  /**
   * The resolved directus permissions collection type.
   *
   */
  export type DirectusPermission = Directus.DirectusPermission<System>;

  /**
   * The resolved directus policies collection type.
   *
   */
  export type DirectusPolicy = Directus.DirectusPolicy<System>;

  /**
   * The resolved directus presets collection type.
   *
   */
  export type DirectusPreset = Directus.DirectusPreset<System>;

  /**
   * The resolved directus relations collection type.
   *
   */
  export type DirectusRelation = Directus.DirectusRelation<System>;

  /**
   * The resolved directus revisions collection type.
   *
   */
  export type DirectusRevision = Directus.DirectusRevision<System>;

  /**
   * The resolved directus roles collection type.
   *
   */
  export type DirectusRole = Directus.DirectusRole<System>;

  /**
   * The resolved directus settings collection type.
   *
   */
  export type DirectusSettings = Directus.DirectusSettings<System>;

  /**
   * The resolved directus users collection type.
   *
   */
  export type DirectusUser = Directus.DirectusUser<System>;

  /**
   * The resolved directus webhooks collection type.
   *
   */
  export type DirectusWebhook = Directus.DirectusWebhook<System>;

  /**
   * The resolved directus dashboards collection type.
   *
   */
  export type DirectusDashboard = Directus.DirectusDashboard<System>;

  /**
   * The resolved directus panels collection type.
   *
   */
  export type DirectusPanel = Directus.DirectusPanel<System>;

  /**
   * The resolved directus notifications collection type.
   *
   */
  export type DirectusNotification = Directus.DirectusNotification<System>;

  /**
   * The resolved directus shares collection type.
   *
   */
  export type DirectusShare = Directus.DirectusShare<System>;

  /**
   * The resolved directus flows collection type.
   *
   */
  export type DirectusFlow = Directus.DirectusFlow<System>;

  /**
   * The resolved directus operations collection type.
   *
   */
  export type DirectusOperation = Directus.DirectusOperation<System>;

  /**
   * The resolved directus translations collection type.
   *
   */
  export type DirectusTranslation = Directus.DirectusTranslation<System>;

  /**
   * The resolved directus versions collection type.
   *
   */
  export type DirectusVersion = Directus.DirectusVersion<System>;

  /**
   * The resolved directus extensions collection type.
   *
   */
  export type DirectusExtension = Directus.DirectusExtension<System>;
}

/**
 * All collection types.
 */
export type CollectionsType = {
  /**
   * The resolved directus activity collection type.
   *
   */
  directus_activity: Collections.DirectusActivity[];

  /**
   * The resolved directus collections collection type.
   *
   */
  directus_collections: Collections.DirectusCollection[];

  /**
   * The resolved directus fields collection type.
   *
   */
  directus_fields: Collections.DirectusField[];

  /**
   * The resolved directus files collection type.
   *
   */
  directus_files: Collections.DirectusFile[];

  /**
   * The resolved directus folders collection type.
   *
   */
  directus_folders: Collections.DirectusFolder[];

  /**
   * The resolved directus permissions collection type.
   *
   */
  directus_permissions: Collections.DirectusPermission[];

  /**
   * The resolved directus policies collection type.
   *
   */
  directus_policies: Collections.DirectusPolicy[];

  /**
   * The resolved directus presets collection type.
   *
   */
  directus_presets: Collections.DirectusPreset[];

  /**
   * The resolved directus relations collection type.
   *
   */
  directus_relations: Collections.DirectusRelation[];

  /**
   * The resolved directus revisions collection type.
   *
   */
  directus_revisions: Collections.DirectusRevision[];

  /**
   * The resolved directus roles collection type.
   *
   */
  directus_roles: Collections.DirectusRole[];

  /**
   * The resolved directus settings collection type.
   *
   */
  directus_settings: Collections.DirectusSettings;

  /**
   * The resolved directus users collection type.
   *
   */
  directus_users: Collections.DirectusUser[];

  /**
   * The resolved directus webhooks collection type.
   *
   */
  directus_webhooks: Collections.DirectusWebhook[];

  /**
   * The resolved directus dashboards collection type.
   *
   */
  directus_dashboards: Collections.DirectusDashboard[];

  /**
   * The resolved directus panels collection type.
   *
   */
  directus_panels: Collections.DirectusPanel[];

  /**
   * The resolved directus notifications collection type.
   *
   */
  directus_notifications: Collections.DirectusNotification[];

  /**
   * The resolved directus shares collection type.
   *
   */
  directus_shares: Collections.DirectusShare[];

  /**
   * The resolved directus flows collection type.
   *
   */
  directus_flows: Collections.DirectusFlow[];

  /**
   * The resolved directus operations collection type.
   *
   */
  directus_operations: Collections.DirectusOperation[];

  /**
   * The resolved directus translations collection type.
   *
   */
  directus_translations: Collections.DirectusTranslation[];

  /**
   * The resolved directus versions collection type.
   *
   */
  directus_versions: Collections.DirectusVersion[];

  /**
   * The resolved directus extensions collection type.
   *
   */
  directus_extensions: Collections.DirectusExtension[];
};

/**
 * System schema extensions.
 */

export interface System {
  /**
   * The definition for the directus activity system collection.
   *
   */
  directus_activity: {}[];

  /**
   * The definition for the directus collections system collection.
   *
   */
  directus_collections: {}[];

  /**
   * The definition for the directus fields system collection.
   *
   */
  directus_fields: {}[];

  /**
   * The definition for the directus files system collection.
   *
   */
  directus_files: {}[];

  /**
   * The definition for the directus folders system collection.
   *
   */
  directus_folders: {}[];

  /**
   * The definition for the directus permissions system collection.
   *
   */
  directus_permissions: {}[];

  /**
   * The definition for the directus policies system collection.
   *
   */
  directus_policies: {}[];

  /**
   * The definition for the directus presets system collection.
   *
   */
  directus_presets: {}[];

  /**
   * The definition for the directus relations system collection.
   *
   */
  directus_relations: {}[];

  /**
   * The definition for the directus revisions system collection.
   *
   */
  directus_revisions: {}[];

  /**
   * The definition for the directus roles system collection.
   *
   */
  directus_roles: {}[];

  /**
   * The definition for the directus settings system collection.
   *
   */
  directus_settings: {};

  /**
   * The definition for the directus users system collection.
   *
   */
  directus_users: {}[];

  /**
   * The definition for the directus webhooks system collection.
   *
   */
  directus_webhooks: {}[];

  /**
   * The definition for the directus dashboards system collection.
   *
   */
  directus_dashboards: {}[];

  /**
   * The definition for the directus panels system collection.
   *
   */
  directus_panels: {}[];

  /**
   * The definition for the directus notifications system collection.
   *
   */
  directus_notifications: {}[];

  /**
   * The definition for the directus shares system collection.
   *
   */
  directus_shares: {}[];

  /**
   * The definition for the directus flows system collection.
   *
   */
  directus_flows: {}[];

  /**
   * The definition for the directus operations system collection.
   *
   */
  directus_operations: {}[];

  /**
   * The definition for the directus translations system collection.
   *
   */
  directus_translations: {}[];

  /**
   * The definition for the directus versions system collection.
   *
   */
  directus_versions: {}[];

  /**
   * The definition for the directus extensions system collection.
   *
   */
  directus_extensions: {}[];
}

/**
 * Schema definition.
 */
export interface Schema extends System {}

/**
 * The Directus Client.
 */

export type DirectusRestCommands<T extends Record<any, any>> = keyof {
  [K in keyof T as T[K] extends (
    ...any: any[]
  ) => Directus.RestCommand<any, any>
    ? K
    : never]: K;
};

export type TypedClient = {
  /**
   * Manages multiple items from the DirectusActivity collection.
   */
  DirectusActivities: SystemBinding.DirectusActivityItems;

  /**
   * Manages individual items from the DirectusActivity collection.
   */
  DirectusActivity: SystemBinding.DirectusActivityItem;

  /**
   * Manages multiple items from the DirectusCollection collection.
   */
  DirectusCollections: SystemBinding.DirectusCollectionItems;

  /**
   * Manages individual items from the DirectusCollection collection.
   */
  DirectusCollection: SystemBinding.DirectusCollectionItem;

  /**
   * Manages multiple items from the DirectusField collection.
   */
  DirectusFields: SystemBinding.DirectusFieldItems;

  /**
   * Manages individual items from the DirectusField collection.
   */
  DirectusField: SystemBinding.DirectusFieldItem;

  /**
   * Manages multiple items from the DirectusFile collection.
   */
  DirectusFiles: SystemBinding.DirectusFileItems;

  /**
   * Manages individual items from the DirectusFile collection.
   */
  DirectusFile: SystemBinding.DirectusFileItem;

  /**
   * Manages multiple items from the DirectusFolder collection.
   */
  DirectusFolders: SystemBinding.DirectusFolderItems;

  /**
   * Manages individual items from the DirectusFolder collection.
   */
  DirectusFolder: SystemBinding.DirectusFolderItem;

  /**
   * Manages multiple items from the DirectusPermission collection.
   */
  DirectusPermissions: SystemBinding.DirectusPermissionItems;

  /**
   * Manages individual items from the DirectusPermission collection.
   */
  DirectusPermission: SystemBinding.DirectusPermissionItem;

  /**
   * Manages multiple items from the DirectusPolicy collection.
   */
  DirectusPolicies: SystemBinding.DirectusPolicyItems;

  /**
   * Manages individual items from the DirectusPolicy collection.
   */
  DirectusPolicy: SystemBinding.DirectusPolicyItem;

  /**
   * Manages multiple items from the DirectusPreset collection.
   */
  DirectusPresets: SystemBinding.DirectusPresetItems;

  /**
   * Manages individual items from the DirectusPreset collection.
   */
  DirectusPreset: SystemBinding.DirectusPresetItem;

  /**
   * Manages multiple items from the DirectusRelation collection.
   */
  DirectusRelations: SystemBinding.DirectusRelationItems;

  /**
   * Manages individual items from the DirectusRelation collection.
   */
  DirectusRelation: SystemBinding.DirectusRelationItem;

  /**
   * Manages multiple items from the DirectusRevision collection.
   */
  DirectusRevisions: SystemBinding.DirectusRevisionItems;

  /**
   * Manages individual items from the DirectusRevision collection.
   */
  DirectusRevision: SystemBinding.DirectusRevisionItem;

  /**
   * Manages multiple items from the DirectusRole collection.
   */
  DirectusRoles: SystemBinding.DirectusRoleItems;

  /**
   * Manages individual items from the DirectusRole collection.
   */
  DirectusRole: SystemBinding.DirectusRoleItem;

  /**
   * Fetches the only DirectusSetting instance available.
   */
  ["DirectusSettings"]<
    const Query extends Directus.Query<
      CollectionsType,
      Collections.DirectusSettings
    >,
  >(
    query?: Query,
  ): Promise<
    ApplyQueryFields<
      CollectionsType,
      Collections.DirectusSettings,
      Query["fields"]
    >
  >;

  /**
   * Manages multiple items from the DirectusUser collection.
   */
  DirectusUsers: SystemBinding.DirectusUserItems;

  /**
   * Manages individual items from the DirectusUser collection.
   */
  DirectusUser: SystemBinding.DirectusUserItem;

  /**
   * Manages multiple items from the DirectusWebhook collection.
   */
  DirectusWebhooks: SystemBinding.DirectusWebhookItems;

  /**
   * Manages individual items from the DirectusWebhook collection.
   */
  DirectusWebhook: SystemBinding.DirectusWebhookItem;

  /**
   * Manages multiple items from the DirectusDashboard collection.
   */
  DirectusDashboards: SystemBinding.DirectusDashboardItems;

  /**
   * Manages individual items from the DirectusDashboard collection.
   */
  DirectusDashboard: SystemBinding.DirectusDashboardItem;

  /**
   * Manages multiple items from the DirectusPanel collection.
   */
  DirectusPanels: SystemBinding.DirectusPanelItems;

  /**
   * Manages individual items from the DirectusPanel collection.
   */
  DirectusPanel: SystemBinding.DirectusPanelItem;

  /**
   * Manages multiple items from the DirectusNotification collection.
   */
  DirectusNotifications: SystemBinding.DirectusNotificationItems;

  /**
   * Manages individual items from the DirectusNotification collection.
   */
  DirectusNotification: SystemBinding.DirectusNotificationItem;

  /**
   * Manages multiple items from the DirectusShare collection.
   */
  DirectusShares: SystemBinding.DirectusShareItems;

  /**
   * Manages individual items from the DirectusShare collection.
   */
  DirectusShare: SystemBinding.DirectusShareItem;

  /**
   * Manages multiple items from the DirectusFlow collection.
   */
  DirectusFlows: SystemBinding.DirectusFlowItems;

  /**
   * Manages individual items from the DirectusFlow collection.
   */
  DirectusFlow: SystemBinding.DirectusFlowItem;

  /**
   * Manages multiple items from the DirectusOperation collection.
   */
  DirectusOperations: SystemBinding.DirectusOperationItems;

  /**
   * Manages individual items from the DirectusOperation collection.
   */
  DirectusOperation: SystemBinding.DirectusOperationItem;

  /**
   * Manages multiple items from the DirectusTranslation collection.
   */
  DirectusTranslations: SystemBinding.DirectusTranslationItems;

  /**
   * Manages individual items from the DirectusTranslation collection.
   */
  DirectusTranslation: SystemBinding.DirectusTranslationItem;

  /**
   * Manages multiple items from the DirectusExtension collection.
   */
  DirectusExtensions: SystemBinding.DirectusExtensionItems;

  /**
   * Manages individual items from the DirectusExtension collection.
   */
  DirectusExtension: SystemBinding.DirectusExtensionItem;
} & {
  [K in keyof DirectusCommands as K extends
    | `read${string}`
    | `delete${string}`
    | `update${string}`
    | `create${string}`
    ? never
    : K]: DirectusCommands[K];
};

type ExcludedDirectusCommands = "withOptions" | "withToken" | "withSearch";

/**
 * This is almost a sanity check for protecting against breaking changes in the SDK.
 * If this is erroring for you, the SDK probably changed and there's an update needed.
 */

const excludedDirectusCommands: {
  [K in keyof Omit<
    DirectusSDK,
    Exclude<keyof DirectusCommands, ExcludedDirectusCommands>
  >]: true;
} = {
  ["auth"]: true,
  ["authentication"]: true,
  ["createDirectus"]: true,
  ["rest"]: true,
  ["formatFields"]: true,
  ["generateUid"]: true,
  ["getAuthEndpoint"]: true,
  ["graphql"]: true,
  ["memoryStorage"]: true,
  ["messageCallback"]: true,
  ["pong"]: true,
  ["queryToParams"]: true,
  ["realtime"]: true,
  ["sleep"]: true,
  ["staticToken"]: true,
  ["throwIfCoreCollection"]: true,
  ["throwIfEmpty"]: true,
  ["withOptions"]: true,
  ["withToken"]: true,
  ["withSearch"]: true,
} as const;

export type _InjectSchemaSystemTypes<T, Schema> =
  T extends Directus.Query<any, infer C>
    ? Directus.Query<Schema, C>
    : T extends Directus.DirectusActivity<any>
      ? Directus.DirectusActivity<Schema>
      : T extends Directus.DirectusCollection<any>
        ? Directus.DirectusCollection<Schema>
        : T extends Directus.DirectusField<any>
          ? Directus.DirectusField<Schema>
          : T extends Directus.DirectusFile<any>
            ? Directus.DirectusFile<Schema>
            : T extends Directus.DirectusFolder<any>
              ? Directus.DirectusFolder<Schema>
              : T extends Directus.DirectusPermission<any>
                ? Directus.DirectusPermission<Schema>
                : T extends Directus.DirectusPolicy<any>
                  ? Directus.DirectusPolicy<Schema>
                  : T extends Directus.DirectusPreset<any>
                    ? Directus.DirectusPreset<Schema>
                    : T extends Directus.DirectusRelation<any>
                      ? Directus.DirectusRelation<Schema>
                      : T extends Directus.DirectusRevision<any>
                        ? Directus.DirectusRevision<Schema>
                        : T extends Directus.DirectusRole<any>
                          ? Directus.DirectusRole<Schema>
                          : T extends Directus.DirectusSettings<any>
                            ? Directus.DirectusSettings<Schema>
                            : T extends Directus.DirectusUser<any>
                              ? Directus.DirectusUser<Schema>
                              : T extends Directus.DirectusWebhook<any>
                                ? Directus.DirectusWebhook<Schema>
                                : T extends Directus.DirectusDashboard<any>
                                  ? Directus.DirectusDashboard<Schema>
                                  : T extends Directus.DirectusPanel<any>
                                    ? Directus.DirectusPanel<Schema>
                                    : T extends Directus.DirectusNotification<any>
                                      ? Directus.DirectusNotification<Schema>
                                      : T extends Directus.DirectusShare<any>
                                        ? Directus.DirectusShare<Schema>
                                        : T extends Directus.DirectusFlow<any>
                                          ? Directus.DirectusFlow<Schema>
                                          : T extends Directus.DirectusOperation<any>
                                            ? Directus.DirectusOperation<Schema>
                                            : T extends Directus.DirectusTranslation<any>
                                              ? Directus.DirectusTranslation<Schema>
                                              : T extends Directus.DirectusVersion<any>
                                                ? Directus.DirectusVersion<Schema>
                                                : T extends Directus.DirectusExtension<any>
                                                  ? Directus.DirectusExtension<Schema>
                                                  : T extends Directus.DirectusUser<any>
                                                    ? Directus.DirectusUser<Schema>
                                                    : T;

export type InjectSchemaSystemTypes<T, Schema> =
  T extends Partial<infer Nested>
    ? Partial<_InjectSchemaSystemTypes<Nested, Schema>>
    : _InjectSchemaSystemTypes<T, Schema>;

export type InjectSchema<T, Schema> = T extends []
  ? []
  : T extends [infer Param]
    ? [InjectSchema<Param, Schema>]
    : T extends [infer Param, ...infer Rest]
      ? [InjectSchema<Param, Schema>, ...InjectSchema<Rest, Schema>]
      : InjectSchemaSystemTypes<T, Schema>;

export type DirectusCommands = {
  [K in DirectusRestCommands<DirectusSDK>]: (
    ...args: InjectSchema<Parameters<DirectusSDK[K]>, Schema>
  ) => Promise<
    ReturnType<DirectusSDK[K]> extends Directus.RestCommand<infer Output, any>
      ? Output
      : unknown
  >;
};

function isDirectusRestCommand(
  pair: [any, any],
): pair is [string, (...args: any[]) => Directus.RestCommand<any, any>] {
  return (
    !((pair?.[0] as any) in excludedDirectusCommands) &&
    typeof pair?.[1] === "function" &&
    !(
      (pair?.[0]).startsWith("read") ||
      (pair?.[0]).startsWith("create") ||
      (pair?.[0]).startsWith("update") ||
      (pair?.[0]).startsWith("delete")
    )
  );
}

function isDirectusRestClient<Schema>(
  client: DirectusSDK.DirectusClient<Schema>,
): client is DirectusSDK.DirectusClient<Schema> &
  DirectusSDK.RestClient<Schema> {
  return client && "request" in client;
}

export const schema = () => {
  return <Schema,>(client: Directus.DirectusClient<Schema>): TypedClient => {
    if (!isDirectusRestClient(client)) {
      throw new Error("Directus client must have the REST plugin enabled.");
    }

    return Object.fromEntries([
      ...Object.entries(DirectusSDK)
        .filter(isDirectusRestCommand)
        .map(([key, value]) => {
          return [
            key,
            (...args: any[]): any => {
              return client.request(value(...args));
            },
          ];
        }),

      [
        "DirectusActivities",
        new SystemBinding.DirectusActivityItems(client as any),
      ],
      [
        "DirectusActivity",
        new SystemBinding.DirectusActivityItem(client as any),
      ],

      [
        "DirectusCollections",
        new SystemBinding.DirectusCollectionItems(client as any),
      ],
      [
        "DirectusCollection",
        new SystemBinding.DirectusCollectionItem(client as any),
      ],

      ["DirectusFields", new SystemBinding.DirectusFieldItems(client as any)],
      ["DirectusField", new SystemBinding.DirectusFieldItem(client as any)],

      ["DirectusFiles", new SystemBinding.DirectusFileItems(client as any)],
      ["DirectusFile", new SystemBinding.DirectusFileItem(client as any)],

      ["DirectusFolders", new SystemBinding.DirectusFolderItems(client as any)],
      ["DirectusFolder", new SystemBinding.DirectusFolderItem(client as any)],

      [
        "DirectusPermissions",
        new SystemBinding.DirectusPermissionItems(client as any),
      ],
      [
        "DirectusPermission",
        new SystemBinding.DirectusPermissionItem(client as any),
      ],

      [
        "DirectusPolicies",
        new SystemBinding.DirectusPolicyItems(client as any),
      ],
      ["DirectusPolicy", new SystemBinding.DirectusPolicyItem(client as any)],

      ["DirectusPresets", new SystemBinding.DirectusPresetItems(client as any)],
      ["DirectusPreset", new SystemBinding.DirectusPresetItem(client as any)],

      [
        "DirectusRelations",
        new SystemBinding.DirectusRelationItems(client as any),
      ],
      [
        "DirectusRelation",
        new SystemBinding.DirectusRelationItem(client as any),
      ],

      [
        "DirectusRevisions",
        new SystemBinding.DirectusRevisionItems(client as any),
      ],
      [
        "DirectusRevision",
        new SystemBinding.DirectusRevisionItem(client as any),
      ],

      ["DirectusRoles", new SystemBinding.DirectusRoleItems(client as any)],
      ["DirectusRole", new SystemBinding.DirectusRoleItem(client as any)],

      [
        "DirectusSettings",
        (query: any) => {
          return client.request(SystemBinding.readDirectusSettings(query));
        },
      ],

      ["DirectusUsers", new SystemBinding.DirectusUserItems(client as any)],
      ["DirectusUser", new SystemBinding.DirectusUserItem(client as any)],

      [
        "DirectusWebhooks",
        new SystemBinding.DirectusWebhookItems(client as any),
      ],
      ["DirectusWebhook", new SystemBinding.DirectusWebhookItem(client as any)],

      [
        "DirectusDashboards",
        new SystemBinding.DirectusDashboardItems(client as any),
      ],
      [
        "DirectusDashboard",
        new SystemBinding.DirectusDashboardItem(client as any),
      ],

      ["DirectusPanels", new SystemBinding.DirectusPanelItems(client as any)],
      ["DirectusPanel", new SystemBinding.DirectusPanelItem(client as any)],

      [
        "DirectusNotifications",
        new SystemBinding.DirectusNotificationItems(client as any),
      ],
      [
        "DirectusNotification",
        new SystemBinding.DirectusNotificationItem(client as any),
      ],

      ["DirectusShares", new SystemBinding.DirectusShareItems(client as any)],
      ["DirectusShare", new SystemBinding.DirectusShareItem(client as any)],

      ["DirectusFlows", new SystemBinding.DirectusFlowItems(client as any)],
      ["DirectusFlow", new SystemBinding.DirectusFlowItem(client as any)],

      [
        "DirectusOperations",
        new SystemBinding.DirectusOperationItems(client as any),
      ],
      [
        "DirectusOperation",
        new SystemBinding.DirectusOperationItem(client as any),
      ],

      [
        "DirectusTranslations",
        new SystemBinding.DirectusTranslationItems(client as any),
      ],
      [
        "DirectusTranslation",
        new SystemBinding.DirectusTranslationItem(client as any),
      ],

      [
        "DirectusExtensions",
        new SystemBinding.DirectusExtensionItems(client as any),
      ],
      [
        "DirectusExtension",
        new SystemBinding.DirectusExtensionItem(client as any),
      ],
    ]);
  };
};

export interface BindableClient {
  with: <
    Client extends DirectusSDK.DirectusClient<any>,
    Extension extends object,
  >(
    createExtension: (client: Client) => Extension,
  ) => this & Extension;
}

export const bindings = () => {
  return <Schema, Client extends DirectusSDK.DirectusClient<Schema>>(
    client: Client,
  ): BindableClient => {
    return {
      with(createExtension: any) {
        const extension = createExtension(this);
        const extensions = Object.entries(
          extension,
        ).reduce<PropertyDescriptorMap>((properties, [name, value]) => {
          return {
            ...properties,
            [name]: {
              value,
              configurable: true,
              writable: true,
              enumerable: true,
            },
          };
        }, {});

        Object.defineProperties(this, extensions);

        return this;
      },
    } as any;
  };
};

export function createDirectusWithTypes(
  url: string,
): Directus.DirectusClient<Schema> & Directus.RestClient<Schema> & TypedClient {
  return DirectusSDK.createDirectus<Schema>(url)
    .with(bindings())
    .with(DirectusSDK.rest())
    .with(schema());
}

export const createTypedClient = createDirectusWithTypes;
